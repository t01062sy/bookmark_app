openapi: 3.0.3
info:
  title: Bookmark App API
  description: Personal bookmark management with AI-powered organization
  version: 1.0.0
  contact:
    name: Bookmark App
servers:
  - url: https://api.bookmarks.example.com/v1
    description: Production server
  - url: http://localhost:3000/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  # Authentication
  /auth/webauthn/registration:
    post:
      tags: [Authentication]
      summary: Start WebAuthn registration
      operationId: startWebAuthnRegistration
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                device_name:
                  type: string
                  example: "iPhone 15 Pro"
      responses:
        200:
          description: Registration challenge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebAuthnChallenge'

  /auth/webauthn/registration/verify:
    post:
      tags: [Authentication]
      summary: Verify WebAuthn registration
      operationId: verifyWebAuthnRegistration
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebAuthnCredential'
      responses:
        200:
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/webauthn/assertion:
    post:
      tags: [Authentication]
      summary: Start WebAuthn authentication
      operationId: startWebAuthnAssertion
      security: []
      responses:
        200:
          description: Authentication challenge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebAuthnChallenge'

  /auth/webauthn/assertion/verify:
    post:
      tags: [Authentication]
      summary: Verify WebAuthn authentication
      operationId: verifyWebAuthnAssertion
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebAuthnAssertion'
      responses:
        200:
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        200:
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/sessions:
    get:
      tags: [Authentication]
      summary: List user sessions
      operationId: listSessions
      responses:
        200:
          description: List of active sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'

  /auth/sessions/{sessionId}:
    delete:
      tags: [Authentication]
      summary: Revoke session
      operationId: revokeSession
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Session revoked

  # Bookmarks
  /bookmarks:
    get:
      tags: [Bookmarks]
      summary: List bookmarks
      operationId: listBookmarks
      parameters:
        - name: q
          in: query
          description: Search query
          schema:
            type: string
        - name: tag
          in: query
          description: Filter by tag
          schema:
            type: string
        - name: source_type
          in: query
          description: Filter by source type
          schema:
            type: string
            enum: [youtube, x, article, news, other]
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: after
          in: query
          description: Filter by created after date
          schema:
            type: string
            format: date-time
        - name: before
          in: query
          description: Filter by created before date
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: pinned
          in: query
          description: Filter by pinned status
          schema:
            type: boolean
        - name: archived
          in: query
          description: Filter by archived status
          schema:
            type: boolean
      responses:
        200:
          description: List of bookmarks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkList'

    post:
      tags: [Bookmarks]
      summary: Create bookmark
      operationId: createBookmark
      parameters:
        - name: Idempotency-Key
          in: header
          required: true
          description: Idempotency key for duplicate prevention
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookmarkRequest'
      responses:
        201:
          description: Bookmark created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        409:
          description: Bookmark already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /bookmarks/{id}:
    get:
      tags: [Bookmarks]
      summary: Get bookmark
      operationId: getBookmark
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Bookmark details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        404:
          description: Bookmark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags: [Bookmarks]
      summary: Update bookmark
      operationId: updateBookmark
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookmarkRequest'
      responses:
        200:
          description: Bookmark updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'

    delete:
      tags: [Bookmarks]
      summary: Delete bookmark
      operationId: deleteBookmark
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Bookmark deleted

  /bookmarks/{id}/reprocess:
    post:
      tags: [Bookmarks]
      summary: Reprocess bookmark with LLM
      operationId: reprocessBookmark
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        202:
          description: Reprocessing started
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Reprocessing queued"

  # LLM Processing
  /llm/process:
    post:
      tags: [LLM Processing]
      summary: Process bookmark with LLM for summarization and categorization
      operationId: processBookmarkWithLLM
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookmark_id
                - url
              properties:
                bookmark_id:
                  type: string
                  format: uuid
                  description: ID of the bookmark to process
                  example: "59e7f8bf-6a88-49f1-82d9-f517215ec720"
                url:
                  type: string
                  format: uri
                  description: URL of the bookmark
                  example: "https://supabase.com/docs/guides/functions"
                title:
                  type: string
                  description: Title of the bookmark (optional)
                  example: "Supabase Edge Functions Guide"
                content:
                  type: string
                  description: Content to process (optional)
                  example: "Supabase Edge Functions provide a serverless compute environment..."
      responses:
        200:
          description: LLM processing completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookmark_id:
                    type: string
                    format: uuid
                    example: "59e7f8bf-6a88-49f1-82d9-f517215ec720"
                  summary:
                    type: string
                    description: Generated summary in Japanese
                    example: "Supabase Edge Functionsは、カスタムビジネスロジックを実行するためのサーバーレスコンピューティング環境を提供します。"
                  category:
                    type: string
                    enum: [tech, news, blog, video, other]
                    example: "tech"
                  tags:
                    type: array
                    items:
                      type: string
                    example: ["Supabase", "Edge Functions", "サーバーレス"]
                  status:
                    type: string
                    enum: [processing, done, failed]
                    example: "done"
                  cost:
                    type: number
                    format: float
                    description: Processing cost in USD (optional)
                    example: 0.002
        500:
          description: LLM processing failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookmark_id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [failed]
                    example: "failed"
                  error_message:
                    type: string
                    example: "OpenAI API error: Rate limit exceeded"

  /bookmarks/export:
    post:
      tags: [Bookmarks]
      summary: Export bookmarks
      operationId: exportBookmarks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                format:
                  type: string
                  enum: [json, csv]
                  default: json
      responses:
        200:
          description: Export data
          content:
            application/json:
              schema:
                type: object
            text/csv:
              schema:
                type: string

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
      required:
        - error
        - message

    WebAuthnChallenge:
      type: object
      properties:
        challenge:
          type: string
        rp:
          type: object
        user:
          type: object
        pubKeyCredParams:
          type: array
          items:
            type: object

    WebAuthnCredential:
      type: object
      properties:
        id:
          type: string
        rawId:
          type: string
        response:
          type: object
        type:
          type: string

    WebAuthnAssertion:
      type: object
      properties:
        id:
          type: string
        rawId:
          type: string
        response:
          type: object
        type:
          type: string

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
          description: Token expiry in seconds
      required:
        - access_token
        - refresh_token
        - expires_in

    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        device_name:
          type: string
        created_at:
          type: string
          format: date-time
        accessed_at:
          type: string
          format: date-time
        current:
          type: boolean
      required:
        - id
        - created_at
        - accessed_at
        - current

    CreateBookmarkRequest:
      type: object
      properties:
        url:
          type: string
          format: uri
        source_hint:
          type: string
          enum: [youtube, x, article, news, other]
        created_from:
          type: string
          enum: [ios, web, api]
      required:
        - url

    UpdateBookmarkRequest:
      type: object
      properties:
        title_final:
          type: string
        summary:
          type: string
        tags:
          type: array
          items:
            type: string
        category:
          type: string
        pinned:
          type: boolean
        archived:
          type: boolean
        read_at:
          type: string
          format: date-time
          nullable: true

    Bookmark:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
          format: uri
        canonical_url:
          type: string
          format: uri
        domain:
          type: string
        source_type:
          type: string
          enum: [youtube, x, article, news, other]
        title_raw:
          type: string
        title_final:
          type: string
        summary:
          type: string
        tags:
          type: array
          items:
            type: string
        category:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        read_at:
          type: string
          format: date-time
          nullable: true
        pinned:
          type: boolean
        archived:
          type: boolean
        llm_status:
          type: string
          enum: [queued, processing, done, failed]
      required:
        - id
        - url
        - domain
        - source_type
        - created_at
        - updated_at
        - pinned
        - archived
        - llm_status

    BookmarkList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Bookmark'
        pagination:
          type: object
          properties:
            total:
              type: integer
            limit:
              type: integer
            offset:
              type: integer
            has_more:
              type: boolean
      required:
        - data
        - pagination